var search_data = {"index":{"searchIndex":["automationheader","brpmautomation","brpmrequest","brpmrest","dispatchbaa","dispatchbase","dispatchnsh","dispatchssh","git","jira","jiraclient","object","param","resourceframework","svn","transportbaa","transportnsh","transportssh","rest_version()","action_library_path()","add()","add_channel_properties()","add_directory_to_template()","add_file_to_template()","add_files()","add_files()","add_target_servers()","add_template_content()","add_template_property()","app()","app_components()","app_environments()","app_routes()","application_info()","assign_local_param()","assign_version_tag_to_steps()","assign_version_to_steps()","assume_role()","brpd_compatibility()","build_wrapper_script()","checkout()","checkout()","clean_line_breaks()","commit()","commit()","complex_property_value()","copy_files()","copy_job()","create()","create_command_wrapper()","create_comment()","create_component()","create_component_package()","create_empty_package()","create_empty_template()","create_file_deploy_job()","create_group()","create_local_params()","create_nsh_script_job()","create_nsh_script_job()","create_output_file()","create_package_job()","create_request_params_file()","create_version_tags()","create_version_tags()","cred_errors?()","custom_fields()","default_group_path()","default_item_name()","default_list()","default_table()","delay_sleep()","deploy_package()","deploy_package_instance()","deploy_package_instance()","deploy_package_instance()","display_result()","display_result()","dos_path()","download_files()","ensure_group_path()","execute_cli_command()","execute_cli_command_using_attachments()","execute_command()","execute_job_with_results()","execute_nsh_script_job()","execute_script()","execute_script()","execute_script()","execute_script_per_server()","execute_shell()","export()","export_deploy_job_results()","fetch_url()","field()","find_or_add()","format_date()","get()","get()","get()","get_artifact_paths()","get_attachment_nsh_path()","get_cred()","get_custom_field_ids()","get_custom_fields()","get_group_items()","get_instance_id_from_version()","get_integration_details()","get_issue()","get_issue_transitions()","get_keyword_items()","get_list()","get_local_params()","get_option()","get_other_request_params()","get_other_request_params()","get_param()","get_param()","get_platform_servers()","get_projects()","get_request_params()","get_request_params()","get_rpd_next_environment()","get_selected_hosts()","get_server_id()","get_server_list()","get_server_list()","get_server_property()","get_servers_by_property_value()","get_session_id()","get_staging_dir()","get_transfer_properties()","global_timestamp()","group_path_exists()","groups()","hashify_list()","hostname_from_url()","init_brpm_db_connection()","init_local_params()","init_log_file()","init_request_params()","initialize_framework()","initialize_framework()","installed_components()","insure_proxy()","jenkins_build()","jenkins_build_results()","jenkins_build_status()","jenkins_job_build_data()","jenkins_job_data()","jenkins_monitor_build()","load_customer_include()","load_helper()","load_helpers()","load_input_params()","load_input_params()","local_params()","log()","log_it()","log_message()","login()","logout()","ls()","make_temp_file()","message_box()","message_box()","method_missing()","monitor_request()","monitor_request()","ncp()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nexec_win()","notify()","notify()","nsh()","nsh_command()","nsh_path()","nsh_path()","obj_to_url_item()","os_platform()","output_separator()","owner()","pack_response()","package_artifacts()","package_artifacts()","package_artifacts()","package_artifacts()","package_staged_artifacts()","package_staged_artifacts()","params()","parse_uri()","path_from_nsh_path()","path_safe()","plan()","plan_routes()","plan_stages()","post_issue_transition()","precision_timestamp()","present?()","present_json?()","present_local?()","private_properties()","privatize()","read_shebang()","remove_local_param()","request()","requestor()","required()","required_option()","rest_call()","rest_request_id()","route_environments()","rpd_attach_deployment_logs()","rpd_attach_logs()","rpd_create_package_instance()","rpd_deploy_package_instance()","rpd_execute_api()","rpd_get_package_id()","rpd_transfer_properties()","rpm_from_rpd_env()","rpm_load_module()","run_command()","save_local_params()","save_request_params()","save_request_params()","script_exec()","script_exec()","script_execute_body()","search()","semaphore()","semaphore_clear()","semaphore_exists()","semaphore_wait()","server_dns_names()","server_list()","session_id()","set_application_version()","set_build_flag_data()","set_component_flag()","set_credential()","set_job_properties()","set_nsh_script_params()","set_property_flag()","set_server_flag()","set_servers()","set_template_properties()","set_titles_acceptable?()","set_token()","split_nsh_path()","stage()","status()","status()","status()","steps()","steps_with_matching_component()","steps_with_matching_component()","tag()","tag()","ticket_exists()","ticket_type()","update()","update_other_request_params()","update_other_request_params()","update_repo_info()","update_state()","version_tag_exists()","version_tag_query()","version_tag_query()","write_to()"],"longSearchIndex":["automationheader","brpmautomation","brpmrequest","brpmrest","dispatchbaa","dispatchbase","dispatchnsh","dispatchssh","git","jira","jira::jiraclient","object","param","resourceframework","svn","transportbaa","transportnsh","transportssh","jira::rest_version()","resourceframework#action_library_path()","param#add()","dispatchbase#add_channel_properties()","transportbaa#add_directory_to_template()","transportbaa#add_file_to_template()","git#add_files()","svn#add_files()","transportbaa#add_target_servers()","transportbaa#add_template_content()","transportbaa#add_template_property()","brpmrequest#app()","brpmrequest#app_components()","brpmrequest#app_environments()","brpmrequest#app_routes()","object#application_info()","param#assign_local_param()","object#assign_version_tag_to_steps()","brpmrest#assign_version_to_steps()","transportbaa#assume_role()","dispatchbase#brpd_compatibility()","dispatchbase#build_wrapper_script()","git#checkout()","svn#checkout()","dispatchbase#clean_line_breaks()","git#commit()","svn#commit()","param#complex_property_value()","transportssh#copy_files()","transportbaa#copy_job()","brpmrest#create()","dispatchbase#create_command_wrapper()","jira::jiraclient#create_comment()","transportbaa#create_component()","transportbaa#create_component_package()","transportbaa#create_empty_package()","transportbaa#create_empty_template()","transportbaa#create_file_deploy_job()","transportbaa#create_group()","param#create_local_params()","dispatchbaa#create_nsh_script_job()","transportbaa#create_nsh_script_job()","automationheader#create_output_file()","transportbaa#create_package_job()","resourceframework#create_request_params_file()","brpmrest#create_version_tags()","object#create_version_tags()","transportnsh#cred_errors?()","jira::jiraclient#custom_fields()","dispatchbaa#default_group_path()","dispatchbaa#default_item_name()","resourceframework#default_list()","resourceframework#default_table()","object#delay_sleep()","transportbaa#deploy_package()","dispatchbaa#deploy_package_instance()","dispatchnsh#deploy_package_instance()","dispatchssh#deploy_package_instance()","automationheader#display_result()","brpmautomation#display_result()","brpmautomation#dos_path()","transportssh#download_files()","transportbaa#ensure_group_path()","transportbaa#execute_cli_command()","transportbaa#execute_cli_command_using_attachments()","transportssh#execute_command()","transportbaa#execute_job_with_results()","transportbaa#execute_nsh_script_job()","dispatchbaa#execute_script()","dispatchnsh#execute_script()","dispatchssh#execute_script()","dispatchnsh#execute_script_per_server()","brpmautomation#execute_shell()","svn#export()","transportbaa#export_deploy_job_results()","automationheader#fetch_url()","jira::jiraclient#field()","param#find_or_add()","jira::jiraclient#format_date()","brpmrest#get()","param#get()","svn#get()","dispatchbase#get_artifact_paths()","transportnsh#get_attachment_nsh_path()","transportnsh#get_cred()","jira::jiraclient#get_custom_field_ids()","jira::jiraclient#get_custom_fields()","transportbaa#get_group_items()","object#get_instance_id_from_version()","automationheader#get_integration_details()","jira::jiraclient#get_issue()","jira::jiraclient#get_issue_transitions()","brpmautomation#get_keyword_items()","brpmrequest#get_list()","param#get_local_params()","brpmautomation#get_option()","object#get_other_request_params()","param#get_other_request_params()","automationheader#get_param()","brpmautomation#get_param()","brpmautomation#get_platform_servers()","jira::jiraclient#get_projects()","object#get_request_params()","resourceframework#get_request_params()","object#get_rpd_next_environment()","automationheader#get_selected_hosts()","transportbaa#get_server_id()","automationheader#get_server_list()","brpmautomation#get_server_list()","param#get_server_property()","automationheader#get_servers_by_property_value()","transportbaa#get_session_id()","brpmautomation#get_staging_dir()","dispatchbase#get_transfer_properties()","object#global_timestamp()","transportbaa#group_path_exists()","brpmrequest#groups()","resourceframework#hashify_list()","automationheader#hostname_from_url()","object#init_brpm_db_connection()","param#init_local_params()","automationheader#init_log_file()","resourceframework#init_request_params()","automationheader#initialize_framework()","object#initialize_framework()","brpmrequest#installed_components()","transportnsh#insure_proxy()","object#jenkins_build()","object#jenkins_build_results()","object#jenkins_build_status()","object#jenkins_job_build_data()","object#jenkins_job_data()","object#jenkins_monitor_build()","resourceframework#load_customer_include()","automationheader#load_helper()","object#load_helpers()","automationheader#load_input_params()","object#load_input_params()","param#local_params()","brpmautomation#log()","resourceframework#log_it()","brpmautomation#log_message()","jira::jiraclient#login()","jira::jiraclient#logout()","transportnsh#ls()","dispatchbase#make_temp_file()","brpmautomation#message_box()","object#message_box()","param#method_missing()","brpmrest#monitor_request()","object#monitor_request()","transportnsh#ncp()","brpmautomation::new()","brpmrequest::new()","brpmrest::new()","dispatchbaa::new()","dispatchbase::new()","dispatchnsh::new()","dispatchssh::new()","git::new()","jira::jiraclient::new()","param::new()","svn::new()","transportbaa::new()","transportnsh::new()","transportssh::new()","transportnsh#nexec_win()","brpmautomation#notify()","brpmrest#notify()","transportnsh#nsh()","transportnsh#nsh_command()","transportbaa#nsh_path()","transportnsh#nsh_path()","transportbaa#obj_to_url_item()","dispatchbase#os_platform()","automationheader#output_separator()","brpmrequest#owner()","automationheader#pack_response()","dispatchbaa#package_artifacts()","dispatchnsh#package_artifacts()","dispatchssh#package_artifacts()","transportbaa#package_artifacts()","dispatchbase#package_staged_artifacts()","transportnsh#package_staged_artifacts()","param#params()","svn#parse_uri()","transportbaa#path_from_nsh_path()","brpmautomation#path_safe()","brpmrequest#plan()","brpmrequest#plan_routes()","brpmrequest#plan_stages()","jira::jiraclient#post_issue_transition()","brpmautomation#precision_timestamp()","param#present?()","param#present_json?()","param#present_local?()","brpmautomation#private_properties()","brpmautomation#privatize()","automationheader#read_shebang()","param#remove_local_param()","brpmrequest#request()","brpmrequest#requestor()","param#required()","brpmautomation#required_option()","brpmautomation#rest_call()","param#rest_request_id()","brpmrequest#route_environments()","object#rpd_attach_deployment_logs()","object#rpd_attach_logs()","object#rpd_create_package_instance()","object#rpd_deploy_package_instance()","object#rpd_execute_api()","object#rpd_get_package_id()","object#rpd_transfer_properties()","object#rpm_from_rpd_env()","object#rpm_load_module()","automationheader#run_command()","param#save_local_params()","object#save_request_params()","resourceframework#save_request_params()","transportnsh#script_exec()","transportssh#script_exec()","transportnsh#script_execute_body()","jira::jiraclient#search()","brpmautomation#semaphore()","brpmautomation#semaphore_clear()","brpmautomation#semaphore_exists()","brpmautomation#semaphore_wait()","dispatchbase#server_dns_names()","param#server_list()","transportbaa#session_id()","automationheader#set_application_version()","automationheader#set_build_flag_data()","automationheader#set_component_flag()","transportbaa#set_credential()","transportbaa#set_job_properties()","transportbaa#set_nsh_script_params()","automationheader#set_property_flag()","automationheader#set_server_flag()","transportssh#set_servers()","transportbaa#set_template_properties()","automationheader#set_titles_acceptable?()","brpmrest#set_token()","brpmautomation#split_nsh_path()","brpmrequest#stage()","git#status()","svn#status()","transportnsh#status()","brpmrequest#steps()","brpmrest#steps_with_matching_component()","object#steps_with_matching_component()","git#tag()","svn#tag()","object#ticket_exists()","jira::jiraclient#ticket_type()","brpmrest#update()","object#update_other_request_params()","param#update_other_request_params()","git#update_repo_info()","brpmrequest#update_state()","object#version_tag_exists()","brpmrest#version_tag_query()","object#version_tag_query()","automationheader#write_to()"],"info":[["AutomationHeader","","AutomationHeader.html","",""],["BrpmAutomation","","BrpmAutomation.html","","<p>The base class for automation Provides convenience routines for working in\nBRPM\n<p>The base class for automation …\n"],["BrpmRequest","","BrpmRequest.html","","<p>Class for interacting with requests\n"],["BrpmRest","","BrpmRest.html","","<p>Base class for rest interactions\n\n<pre>optimized for rest calls to BRPM</pre>\n"],["DispatchBAA","","DispatchBAA.html","",""],["DispatchBase","","DispatchBase.html","",""],["DispatchNSH","","DispatchNSH.html","",""],["DispatchSSH","","DispatchSSH.html","",""],["Git","","Git.html","","<p>Base class for working with Git\n"],["Jira","","Jira.html","",""],["Jira::JiraClient","","Jira/JiraClient.html","",""],["Object","","Object.html","",""],["Param","","Param.html","","<p>Abstraction class for the step params provides convenience routines for\nworking with params\n"],["ResourceFramework","","ResourceFramework.html","",""],["Svn","","Svn.html","","<p>Base class for working with Subversion\n"],["TransportBAA","","TransportBAA.html","",""],["TransportNSH","","TransportNSH.html","","<p>Wrapper class for NSH interactions\n"],["TransportSSH","","TransportSSH.html","",""],["REST_VERSION","Jira","Jira.html#method-c-REST_VERSION","()",""],["action_library_path","ResourceFramework","ResourceFramework.html#method-i-action_library_path","()",""],["add","Param","Param.html#method-i-add","(key_name, value)","<p>Adds a key/value to the params\n<p>Attributes\n<p><code>key_name</code> - key name\n"],["add_channel_properties","DispatchBase","DispatchBase.html#method-i-add_channel_properties","(props, servers, os_platform = \"win\")","<p>Add server properties to transfer properties\n<p>Attributes\n<p><code>props</code> - the existing transfer properties hash\n"],["add_directory_to_template","TransportBAA","TransportBAA.html#method-i-add_directory_to_template","(template_dbkey, asset_path, options = {})","<p>Adds a directory to a ComponentTemplate\n<p>Attributes\n<p><code>template_dbkey</code> - dbkey for component template\n"],["add_file_to_template","TransportBAA","TransportBAA.html#method-i-add_file_to_template","(template_dbkey, asset_path, options = {})","<p>Adds a file part to a ComponentTemplate\n<p>Attributes\n<p><code>template_dbkey</code> - dbkey for component template\n"],["add_files","Git","Git.html#method-i-add_files","(exclude_regex = \"\")","<p>Adds any new files in the local repo to the git commit list\n\n<pre>note: you need to commit after adding files</pre>\n"],["add_files","Svn","Svn.html#method-i-add_files","(options = {})","<p>Adds any new files in the local repo to the svn commit list\n<p>Attributes\n<p><code>exclude_regex</code> - regex to filter …\n"],["add_target_servers","TransportBAA","TransportBAA.html#method-i-add_target_servers","(job_key, servers)","<p>Adds server targets to a Job\n<p>Attributes\n<p><code>job_key</code> - dbkey for job\n"],["add_template_content","TransportBAA","TransportBAA.html#method-i-add_template_content","(template_dbkey, parts_hash, options = {})","<p>Adds files and directories to a ComponentTemplate\n<p>Attributes\n<p><code>template_dbkey</code> - dbkey for component template …\n"],["add_template_property","TransportBAA","TransportBAA.html#method-i-add_template_property","(template_name, group_path, property_name, property_value, options = {})","<p>Sets a single property on a ComponentTemplate\n<p>Attributes\n<p><code>template_name</code> - name for component template\n"],["app","BrpmRequest","BrpmRequest.html#method-i-app","()","<p>Gets the app associated with the request\n<p>Returns\n<p>hash of app information\n"],["app_components","BrpmRequest","BrpmRequest.html#method-i-app_components","()","<p>Gets the components associated with request application\n<p>Returns\n<p>hash of components\n"],["app_environments","BrpmRequest","BrpmRequest.html#method-i-app_environments","()","<p>Gets the components associated with request application\n<p>Returns\n<p>hash of components\n"],["app_routes","BrpmRequest","BrpmRequest.html#method-i-app_routes","()","<p>Gets the routes available for the app\n<p>Returns\n<p>array of hashes of routes\n"],["application_info","Object","Object.html#method-i-application_info","(options = {})",""],["assign_local_param","Param","Param.html#method-i-assign_local_param","(key, value)","<p>Adds a key/value to the json_params\n<p>Attributes\n<p><code>key_name</code> - key name\n"],["assign_version_tag_to_steps","Object","Object.html#method-i-assign_version_tag_to_steps","(version_tag, steps = [])",""],["assign_version_to_steps","BrpmRest","BrpmRest.html#method-i-assign_version_to_steps","(version, steps, options = {})","<p>Takes a version name and assigns it to the steps in a request\n<p>skips steps where the version does not exist …\n"],["assume_role","TransportBAA","TransportBAA.html#method-i-assume_role","(role = @role)","<p>Assumes the role (for SOAP only)\n<p>Attributes\n<p><code>role</code> - role to assume (uses default role from class if\nommitted) …\n"],["brpd_compatibility","DispatchBase","DispatchBase.html#method-i-brpd_compatibility","(props, payload_path = nil, servers = nil)","<p>Add BRPD-like params to transfer_properties\n<p>Attributes\n<p><code>props</code> - the existing transfer properties hash\n"],["build_wrapper_script","DispatchBase","DispatchBase.html#method-i-build_wrapper_script","(os_platform, shebang, properties, options = {})","<p>Builds the wrapper script for the target sets environment variables and\ncall to run target script follows …\n"],["checkout","Git","Git.html#method-i-checkout","(init = false, options = {})","<p>Performs a GIT checkout or initialize repository\n<p>Attributes\n<p><code>init</code> - true to initilize the checkout and local …\n"],["checkout","Svn","Svn.html#method-i-checkout","(init = false)","<p>Performs an svn checkout\n<p>Attributes\n<p><code>init</code> - true to initilize the checkout and local repo\n"],["clean_line_breaks","DispatchBase","DispatchBase.html#method-i-clean_line_breaks","(os_platform, script_file, contents = nil)","<p>Removes carriage returns for unix compatibility Opens passed script path,\nmodifies and saves file\n<p>Attributes …\n"],["commit","Git","Git.html#method-i-commit","(message = \"Automation pushed changes\", options = {})","<p>Performs an GIT commit\n<p>Attributes\n<p><code>message</code> - commit string\n"],["commit","Svn","Svn.html#method-i-commit","(message = \"Automation pushed changes\")","<p>Performs an svn commit\n<p>Attributes\n<p><code>message</code> - commit string\n"],["complex_property_value","Param","Param.html#method-i-complex_property_value","(full_val)","<p>Resolves embedded properties in a string\n<p>Attributes\n<p><code>full_val</code> - string to convert\n"],["copy_files","TransportSSH","TransportSSH.html#method-i-copy_files","(source_files, target_path, options = {})","<p>Copy files to remote targets\n<p>Attributes\n<p><code>source_files</code> - array of files to copy\n"],["copy_job","TransportBAA","TransportBAA.html#method-i-copy_job","(source_job, source_group, target_job, target_group)","<p>Copies an NSHScriptJob in BAA to a new job\n<p>Attributes\n<p><code>source_job</code> - name for package (and template)\n"],["create","BrpmRest","BrpmRest.html#method-i-create","(model_name, data, options = {})","<p>Performs a post on the passed model\n\n<pre>use this to create a new record</pre>\n<p>Attributes\n"],["create_command_wrapper","DispatchBase","DispatchBase.html#method-i-create_command_wrapper","(command, os_platform, source_path, target_path)","<p>Builds the wrapper script for a single command\n<p>Attributes\n<p><code>command</code> - command to execute e.g. unzip\n"],["create_comment","Jira::JiraClient","Jira/JiraClient.html#method-i-create_comment","(issue_id, comment_body = 'Dummy Comment')","<p>Adds a comment to the Jira Issue\n<p>Attributes\n<p><code>issue_key</code> - Jira issue key\n"],["create_component","TransportBAA","TransportBAA.html#method-i-create_component","(component_name, template_key, server_id)","<p>Creates a Component\n<p>Attributes\n<p><code>component_name</code> - name of component\n"],["create_component_package","TransportBAA","TransportBAA.html#method-i-create_component_package","(package_name, depot_group_id, template_id, server_name, options = {})","<p>Creates a package from a component\n<p>Attributes\n<p><code>package_name</code> - name for package\n"],["create_empty_package","TransportBAA","TransportBAA.html#method-i-create_empty_package","(package_name, group_id, options = {})","<p>Creates an empty Package in the Depot\n<p>Attributes\n<p><code>package_name</code> - name of the package\n"],["create_empty_template","TransportBAA","TransportBAA.html#method-i-create_empty_template","(template_name, group_id)","<p>Creates an empty ComponentTemplate\n<p>Attributes\n<p><code>template_name</code> - dbkey for component template\n"],["create_file_deploy_job","TransportBAA","TransportBAA.html#method-i-create_file_deploy_job","(job_name, group_path, source_files, target_path, targets, options = {})","<p>Creates a file deploy Job in BAA\n<p>Attributes\n<p><code>job_name</code> - name for package (and template)\n"],["create_group","TransportBAA","TransportBAA.html#method-i-create_group","(group_name, parent_id, obj_type = \"Job\")","<p>Creates a group inside a parent group\n<p>Attributes\n<p><code>group_path</code> - path to group\n"],["create_local_params","Param","Param.html#method-i-create_local_params","()","<p>Creates the JSON params file if not present\n<p>Returns\n<p>path to file created\n"],["create_nsh_script_job","DispatchBAA","DispatchBAA.html#method-i-create_nsh_script_job","(script_name, script_group, job_params, options = {})","<p>Creates an NSH Script Job in BAA to target servers\n<p>Attributes\n<p><code>script_name</code> - name of nsh script\n"],["create_nsh_script_job","TransportBAA","TransportBAA.html#method-i-create_nsh_script_job","(job_name, group_path, script_name, script_group, job_params, targets, options = {})","<p>Creates an NSH Script Job in BAA to target servers\n<p>Attributes\n<p><code>job_name</code> - name for package (and template) …\n"],["create_output_file","AutomationHeader","AutomationHeader.html#method-i-create_output_file","(params)",""],["create_package_job","TransportBAA","TransportBAA.html#method-i-create_package_job","(job_name, job_group_id, package_id, servers, options = {})","<p>Creates a Job from a package\n<p>Attributes\n<p><code>job_name</code> - name for job\n"],["create_request_params_file","ResourceFramework","ResourceFramework.html#method-i-create_request_params_file","()",""],["create_version_tags","BrpmRest","BrpmRest.html#method-i-create_version_tags","(tag_info, options = {})","<p>Takes an array of version tag info and creates the version tags\n<p>Attributes\n<p><code>tag_info</code> - an array of hashes …\n"],["create_version_tags","Object","Object.html#method-i-create_version_tags","(tag_info)",""],["cred_errors?","TransportNSH","TransportNSH.html#method-i-cred_errors-3F","(status)","<p>Displays any errors from a cred status\n<p>Attributes\n<p><code>status</code> - output from cred command\n"],["custom_fields","Jira::JiraClient","Jira/JiraClient.html#method-i-custom_fields","()",""],["default_group_path","DispatchBAA","DispatchBAA.html#method-i-default_group_path","(version = nil, deploy = false)","<p>Creates a group path for BAA storage optionally uses BAA_BASE_GROUP from\ncustomer_include, otherwise …\n"],["default_item_name","DispatchBAA","DispatchBAA.html#method-i-default_item_name","(version = nil)","<p>Creates a unique item name for BAA storage\n<p>Attributes\n<p><code>version</code> - version name\n"],["default_list","ResourceFramework","ResourceFramework.html#method-i-default_list","(msg)",""],["default_table","ResourceFramework","ResourceFramework.html#method-i-default_table","(other_rows = nil)",""],["delay_sleep","Object","Object.html#method-i-delay_sleep","(cnt = 0)",""],["deploy_package","TransportBAA","TransportBAA.html#method-i-deploy_package","(job_name, package_id, group_path, target_servers, options = {})","<p>Deploys an existing Package in BAA to target servers\n<p>Attributes\n<p><code>job_name</code> - name for deploy job\n"],["deploy_package_instance","DispatchBAA","DispatchBAA.html#method-i-deploy_package_instance","(package_info, options = {})","<p>Deploys an existing Package in BAA to target servers\n<p>Attributes\n<p><code>package_id</code> - id of existing package\n"],["deploy_package_instance","DispatchNSH","DispatchNSH.html#method-i-deploy_package_instance","(staging_info, options = {})","<p>Deploys a packaged instance based on staging info staging info is generated\nby the stage_files routine …\n"],["deploy_package_instance","DispatchSSH","DispatchSSH.html#method-i-deploy_package_instance","(staging_info, options = {})","<p>Deploys a packaged instance based on staging info staging info is generated\nby the stage_files routine …\n"],["display_result","AutomationHeader","AutomationHeader.html#method-i-display_result","(cmd_result)","<p>Pretty display of cmd_result object\n<p>Attributes\n<p><code>cmd_result</code> - hash of results e.g. {“stdout” =&gt; …\n"],["display_result","BrpmAutomation","BrpmAutomation.html#method-i-display_result","(cmd_result)","<p>Takes the command result from run command and build a pretty display\n<p>Attributes\n<p><code>cmd_result</code> - the command …\n"],["dos_path","BrpmAutomation","BrpmAutomation.html#method-i-dos_path","(source_path, drive_letter = \"C\")","<p>Returns the dos path from a standard path\n<p>Attributes\n<p><code>source_path</code> - path in standard “/” format …\n"],["download_files","TransportSSH","TransportSSH.html#method-i-download_files","(source_files, target_path, options = {})","<p>Download files to staging from remote targets\n<p>Attributes\n<p><code>source_files</code> - array of file paths to copy\n"],["ensure_group_path","TransportBAA","TransportBAA.html#method-i-ensure_group_path","(group_path, obj_type = \"Jobs\")","<p>Ensures that a group_path exists, will create if necessary\n<p>Attributes\n<p><code>group_path</code> - path to group\n"],["execute_cli_command","TransportBAA","TransportBAA.html#method-i-execute_cli_command","(namespace, command, args, options = {})","<p>Executes a BLCLI command\n\n<pre>(follow BLCLI docs)</pre>\n<p>Attributes\n"],["execute_cli_command_using_attachments","TransportBAA","TransportBAA.html#method-i-execute_cli_command_using_attachments","(namespace, command, args)","<p>Executes a BLCLI command to return an attachment\n<p>Attributes\n<p><code>namespace</code> - namespace of command\n"],["execute_command","TransportSSH","TransportSSH.html#method-i-execute_command","(command, options = {})","<p>Execute a command on remote targets\n<p>Attributes\n<p><code>command</code> - command to execute\n"],["execute_job_with_results","TransportBAA","TransportBAA.html#method-i-execute_job_with_results","(job_db_key, results = {})","<p>Executes a Job in BAA and returns detailed results\n<p>Attributes\n<p><code>job_db_key</code> - db_key of job\n"],["execute_nsh_script_job","TransportBAA","TransportBAA.html#method-i-execute_nsh_script_job","(job_name, group_path, job_params, targets, target_type = \"server\")","<p>Executes an NSH Script Job in BAA to target servers\n<p>Attributes\n<p><code>job_name</code> - name for package (and template) …\n"],["execute_script","DispatchBAA","DispatchBAA.html#method-i-execute_script","(script_file, options = {})","<p>Wrapper to run a shell action opens passed script path, or executes passed\ntext processes the script …\n"],["execute_script","DispatchNSH","DispatchNSH.html#method-i-execute_script","(script_file, options = {})","<p>Wrapper to run a shell action opens passed script path, or executes passed\ntext processes the script …\n"],["execute_script","DispatchSSH","DispatchSSH.html#method-i-execute_script","(script_file, options = {})","<p>Wrapper to run a shell action opens passed script path, or executes passed\ntext processes the script …\n"],["execute_script_per_server","DispatchNSH","DispatchNSH.html#method-i-execute_script_per_server","(script_file, options = {})","<p>Wrapper to run a shell action opens passed script path, or executes passed\ntext processes the script …\n"],["execute_shell","BrpmAutomation","BrpmAutomation.html#method-i-execute_shell","(command)","<p>Executes a command via shell\n<p>Attributes\n<p><code>command</code> - command to execute on command line\n"],["export","Svn","Svn.html#method-i-export","(target = \"\", revision = \"\")","<p>Performs an svn export\n<p>Attributes\n<p><code>revision</code> - revision to export (options - defaults to latest)\n"],["export_deploy_job_results","TransportBAA","TransportBAA.html#method-i-export_deploy_job_results","(job_folder, job_name, job_run_id, output_file = \"/tmp/test.csv\")","<p>Exports DeployJob results to specified file\n<p>Attributes\n<p><code>job_folder</code> - group folder of job\n"],["fetch_url","AutomationHeader","AutomationHeader.html#method-i-fetch_url","(path, testing=false)",""],["field","Jira::JiraClient","Jira/JiraClient.html#method-i-field","(issue, field)","<p>Returns value of a jira field from the Issue\n<p>Attributes\n<p><code>issue</code> - hash of Jira issue\n"],["find_or_add","Param","Param.html#method-i-find_or_add","(key_name, value)","<p>Adds a key/value to the params if not found\n<p>Attributes\n<p><code>key_name</code> - key name\n"],["format_date","Jira::JiraClient","Jira/JiraClient.html#method-i-format_date","(date_str)","<p>Returns a ruby date object from a Jira date\n<p>Attributes\n<p><code>date_str</code> - Jira date string\n"],["get","BrpmRest","BrpmRest.html#method-i-get","(model_name, model_id = nil, options = {})","<p>Performs a get on the passed model\n<p>Attributes\n<p><code>model_name</code> - rpm model [requests, plans, steps, version_tags\n…\n"],["get","Param","Param.html#method-i-get","(key_name, default = \"\")","<p>Finds a key in params or json_params\n<p>Attributes\n<p><code>key_name</code> - key name\n"],["get","Svn","Svn.html#method-i-get","()","<p>Performs an svn checkout\n<p>Returns\n<p>command output\n"],["get_artifact_paths","DispatchBase","DispatchBase.html#method-i-get_artifact_paths","(p_obj, options = {})","<p>Builds the list of files for deployment\n\n<pre>assumes that there are 3 sources: version, path entry and uploads</pre>\n"],["get_attachment_nsh_path","TransportNSH","TransportNSH.html#method-i-get_attachment_nsh_path","(attachment_local_path, brpm_hostname)","<p>Builds an NSH compatible path for an uploaded file to BRPM\n<p>Attributes\n<p><code>attachment_local_path</code> - path to attachment …\n"],["get_cred","TransportNSH","TransportNSH.html#method-i-get_cred","()","<p>Performs a cred -acquire\n<p>Returns\n<p>cred result message\n"],["get_custom_field_ids","Jira::JiraClient","Jira/JiraClient.html#method-i-get_custom_field_ids","()",""],["get_custom_fields","Jira::JiraClient","Jira/JiraClient.html#method-i-get_custom_fields","(issue)","<p>Returns the custom fields from an issue\n<p>Attributes\n<p><code>issue</code> - jira issue hash\n"],["get_group_items","TransportBAA","TransportBAA.html#method-i-get_group_items","(group_path, obj_type = \"DeployJob\", return_contents = true, options = {})","<p>Gets the object in a group_path\n<p>Attributes\n<p><code>group_path</code> - path to group\n"],["get_instance_id_from_version","Object","Object.html#method-i-get_instance_id_from_version","()",""],["get_integration_details","AutomationHeader","AutomationHeader.html#method-i-get_integration_details","(key = nil, details_yml = nil)",""],["get_issue","Jira::JiraClient","Jira/JiraClient.html#method-i-get_issue","(issue_id, fields = '', expand = '')","<p>GET\n/rest/api/2/issue/{issueIdOrKey}[?fields=<field,field,...>&expand=<param,param,...>]\n"],["get_issue_transitions","Jira::JiraClient","Jira/JiraClient.html#method-i-get_issue_transitions","(issue_id, transition_id = \"\", expand_transition = false)","<p>GET\n/rest/api/2/issue/{issueIdOrKey}/transitions[?transitionId={transistion_id}&expand=transitions.fields]\n…\n"],["get_keyword_items","BrpmAutomation","BrpmAutomation.html#method-i-get_keyword_items","(script_content = nil)",""],["get_list","BrpmRequest","BrpmRequest.html#method-i-get_list","(filter_param)","<p>Gets a list of requests based on a filter\n<p>Attributes\n<p><code>filter_param</code> - filter for requests there are extensive …\n"],["get_local_params","Param","Param.html#method-i-get_local_params","()","<p>Fetches the contents of the json_params file\n<p>Returns\n<p>hash of the params\n"],["get_option","BrpmAutomation","BrpmAutomation.html#method-i-get_option","(options, key, default_value = \"\")","<p>Provides a simple failsafe for working with hash options returns “” if\nthe option doesn’t exist …\n"],["get_other_request_params","Object","Object.html#method-i-get_other_request_params","(other_request)",""],["get_other_request_params","Param","Param.html#method-i-get_other_request_params","(other_request)","<p>Pulls the json params from a different request\n<p>Attributes\n<p><code>other_request</code> - id of other request\n"],["get_param","AutomationHeader","AutomationHeader.html#method-i-get_param","(key_name)",""],["get_param","BrpmAutomation","BrpmAutomation.html#method-i-get_param","(key, default_value = \"\")","<p>Gets a params\n<p>Attributes\n<p><code>key</code> - key to find\n"],["get_platform_servers","BrpmAutomation","BrpmAutomation.html#method-i-get_platform_servers","(os_platform, alt_servers = nil)","<p>Servers in params need to be filtered by OS\n"],["get_projects","Jira::JiraClient","Jira/JiraClient.html#method-i-get_projects","()","<p>GET /rest/api/2/project\n"],["get_request_params","Object","Object.html#method-i-get_request_params","()","<p>Compatibility Routines\n"],["get_request_params","ResourceFramework","ResourceFramework.html#method-i-get_request_params","()",""],["get_rpd_next_environment","Object","Object.html#method-i-get_rpd_next_environment","(args)",""],["get_selected_hosts","AutomationHeader","AutomationHeader.html#method-i-get_selected_hosts","(server_list = nil)",""],["get_server_id","TransportBAA","TransportBAA.html#method-i-get_server_id","(server_name)","<p>Gets the id of a server\n<p>Attributes\n<p><code>server_name</code> - name of server\n"],["get_server_list","AutomationHeader","AutomationHeader.html#method-i-get_server_list","(params)",""],["get_server_list","BrpmAutomation","BrpmAutomation.html#method-i-get_server_list","(params = @params)","<p>Builds a hash of servers and properties from params\n<p>Attributes\n<p><code>params</code> - optional, defaults to the @params …\n"],["get_server_property","Param","Param.html#method-i-get_server_property","(server, property)","<p>Fetches the property value for a server\n<p>Returns\n<p>property value\n"],["get_servers_by_property_value","AutomationHeader","AutomationHeader.html#method-i-get_servers_by_property_value","(prop_name, value, servers = nil)",""],["get_session_id","TransportBAA","TransportBAA.html#method-i-get_session_id","()","<p>Gets a new session id via SOAP login\n<p>Returns\n<p>session_id\n"],["get_staging_dir","BrpmAutomation","BrpmAutomation.html#method-i-get_staging_dir","(version, force = false)","<p>Checks/Creates a staging directory\n<p>Attributes\n<p><code>force</code> - forces creation of the path if it doesnt exist\n"],["get_transfer_properties","DispatchBase","DispatchBase.html#method-i-get_transfer_properties","(keyword_filter = DEFAULT_PARAMS_FILTER, strip_filter = true)","<p>Builds a hash of properties to transfer to target\n<p>Attributes\n<p><code>keyword_filter</code> - filter for params (param …\n"],["global_timestamp","Object","Object.html#method-i-global_timestamp","()",""],["group_path_exists","TransportBAA","TransportBAA.html#method-i-group_path_exists","(group_path, obj_type = \"Jobs\")","<p>Verifies that a path exists\n<p>Attributes\n<p><code>group_path</code> - path to group\n"],["groups","BrpmRequest","BrpmRequest.html#method-i-groups","()","<p>Gets the groups available\n<p>Returns\n<p>array of hashes of groups\n"],["hashify_list","ResourceFramework","ResourceFramework.html#method-i-hashify_list","(list)",""],["hostname_from_url","AutomationHeader","AutomationHeader.html#method-i-hostname_from_url","(url)",""],["init_brpm_db_connection","Object","Object.html#method-i-init_brpm_db_connection","()",""],["init_local_params","Param","Param.html#method-i-init_local_params","()",""],["init_log_file","AutomationHeader","AutomationHeader.html#method-i-init_log_file","(params)",""],["init_request_params","ResourceFramework","ResourceFramework.html#method-i-init_request_params","()",""],["initialize_framework","AutomationHeader","AutomationHeader.html#method-i-initialize_framework","()",""],["initialize_framework","Object","Object.html#method-i-initialize_framework","()",""],["installed_components","BrpmRequest","BrpmRequest.html#method-i-installed_components","()","<p>Gets the installed_components associated with request application\n<p>Returns\n<p>hash of installed_components …\n"],["insure_proxy","TransportNSH","TransportNSH.html#method-i-insure_proxy","()","<p>Verifies that proxy cred is set\n<p>Returns\n<p>blcred cred -acquire output\n"],["jenkins_build","Object","Object.html#method-i-jenkins_build","(build_arguments = {})",""],["jenkins_build_results","Object","Object.html#method-i-jenkins_build_results","(build_no, get_link = false)",""],["jenkins_build_status","Object","Object.html#method-i-jenkins_build_status","(build_no = nil)",""],["jenkins_job_build_data","Object","Object.html#method-i-jenkins_job_build_data","(build_no = nil)","<p>return the status of a build\n"],["jenkins_job_data","Object","Object.html#method-i-jenkins_job_data","()",""],["jenkins_monitor_build","Object","Object.html#method-i-jenkins_monitor_build","(build_no)",""],["load_customer_include","ResourceFramework","ResourceFramework.html#method-i-load_customer_include","(framework_dir)",""],["load_helper","AutomationHeader","AutomationHeader.html#method-i-load_helper","(lib_path)",""],["load_helpers","Object","Object.html#method-i-load_helpers","(lib_path)",""],["load_input_params","AutomationHeader","AutomationHeader.html#method-i-load_input_params","(in_file)","<p>BJB 7/6/2010 Append a user script to the bottom of this one for cap\nexecution\n"],["load_input_params","Object","Object.html#method-i-load_input_params","(in_file)","<p>BJB 7/6/2010 Append a user script to the bottom of this one for cap\nexecution\n"],["local_params","Param","Param.html#method-i-local_params","()","<p>returns the current json_params\n<p>Returns\n<p>hash of params\n"],["log","BrpmAutomation","BrpmAutomation.html#method-i-log","(txt, level = \"INFO\", output_file = nil)","<p>Provides a logging style output\n<p>Attributes\n<p><code>txt</code> - the text to output\n"],["log_it","ResourceFramework","ResourceFramework.html#method-i-log_it","(it)",""],["log_message","BrpmAutomation","BrpmAutomation.html#method-i-log_message","(message, log_type = \"INFO\")","<p>Generates a log formatted mesage\n<p>Attributes\n<p><code>message</code> - the path to the uploaded attachment (from params)\n…\n"],["login","Jira::JiraClient","Jira/JiraClient.html#method-i-login","()","<p>POST /auth/api/1/session\n"],["logout","Jira::JiraClient","Jira/JiraClient.html#method-i-logout","()","<p>DELETE /auth/api/1/session\n"],["ls","TransportNSH","TransportNSH.html#method-i-ls","(nsh_path)","<p>Runs a simple ls command in NSH\n<p>Attributes\n<p><code>nsh_path</code> - path to list files\n"],["make_temp_file","DispatchBase","DispatchBase.html#method-i-make_temp_file","(content)","<p>Creates a temp file in output dir returns path to temp file\n<p>Attributes\n<p><code>content</code> - content for file\n"],["message_box","BrpmAutomation","BrpmAutomation.html#method-i-message_box","(msg, mtype = \"sep\")","<p>Provides a pretty box for titles\n<p>Attributes\n<p><code>msg</code> - the text to output\n"],["message_box","Object","Object.html#method-i-message_box","(msg, mtype = \"sep\")",""],["method_missing","Param","Param.html#method-i-method_missing","(key_name, *args)","<p>Allows you to specify a key like a method call\n<p>Attributes\n<p><code>key_name</code> - key name note: you must use get if …\n"],["monitor_request","BrpmRest","BrpmRest.html#method-i-monitor_request","(request_id, target_state = \"complete\", options = {})","<p>Takes a request_id and monitors status until a condition is met\n<p>Attributes\n<p><code>request_id</code> - id of the calling …\n"],["monitor_request","Object","Object.html#method-i-monitor_request","(request_id, options = {})",""],["ncp","TransportNSH","TransportNSH.html#method-i-ncp","(target_hosts, src_path, target_path)","<p>Copies all files (recursively) from source to destination on target hosts\n<p>Attributes\n<p><code>target_hosts</code> - blade …\n"],["new","BrpmAutomation","BrpmAutomation.html#method-c-new","(params)","<p>Initialize an instance of the class\n<p>Attributes\n<p><code>params</code> - the automation params hash\n"],["new","BrpmRequest","BrpmRequest.html#method-c-new","(id, base_url, params, options = {})","<p>Initializes an instance of the class\n<p>Attributes\n<p><code>id</code> - id of the request to work with\n"],["new","BrpmRest","BrpmRest.html#method-c-new","(base_url, params, options = {})","<p>Initialize an instance of the brpmrest class\n<p>Attributes\n<p><code>base_url</code> - base url for rest calls\n"],["new","DispatchBAA","DispatchBAA.html#method-c-new","(baa_object, params, options = {})","<p>Initialize the class\n<p>Attributes\n<p><code>baa_object</code> - handle to an BAA object\n"],["new","DispatchBase","DispatchBase.html#method-c-new","(params, options = {})","<p>Initialize the class\n<p>Attributes\n<p><code>options</code> - hash of options to use, send “output_file” to\npoint …\n"],["new","DispatchNSH","DispatchNSH.html#method-c-new","(nsh_object, params, options = {})","<p>Initialize the class\n<p>Attributes\n<p><code>nsh_object</code> - handle to an NSH object\n"],["new","DispatchSSH","DispatchSSH.html#method-c-new","(ssh_object, params, options = {})","<p>Initialize the class\n<p>Attributes\n<p><code>nsh_object</code> - handle to an NSH object\n"],["new","Git","Git.html#method-c-new","(git, params, options)","<p>Initializes an instance of the class\n<p>Attributes\n<p><code>git</code> - path to the git executable\n"],["new","Jira::JiraClient","Jira/JiraClient.html#method-c-new","(user, pw, url)","<p>Intialize the instance of the Jira class\n<p>Attributes\n<p><code>options</code> - send any options you would need for BrpmRest …\n"],["new","Param","Param.html#method-c-new","(params, json_params = {})","<p>Initialize an instance of the class\n<p>Attributes\n<p><code>params</code> - send the step params\n"],["new","Svn","Svn.html#method-c-new","(svn, params, options)","<p>Initializes an instance of the class\n<p>Attributes\n<p><code>svn</code> - path to the svn executable\n"],["new","TransportBAA","TransportBAA.html#method-c-new","(baa_url, params, options = {})","<p>Initializes the instance of the baa class\n\n<pre>this will authenticate to the Bladelogic server and\nperform ...</pre>\n"],["new","TransportNSH","TransportNSH.html#method-c-new","(nsh_path, params, options = {}, test_mode = false)","<p>Initialize the class\n<p>Attributes\n<p><code>nsh_path</code> - path to NSH dir on files system (must contain br\ndirectory too) …\n"],["new","TransportSSH","TransportSSH.html#method-c-new","(servers, params, options = {})","<p>Initialize the class\n<p>Attributes\n<p><code>servers</code> - array of servers to use\n"],["nexec_win","TransportNSH","TransportNSH.html#method-i-nexec_win","(target_hosts, target_path, command)","<p>Runs a command via nsh on a windows target\n<p>Attributes\n<p><code>target_hosts</code> - blade hostnames to copy to\n"],["notify","BrpmAutomation","BrpmAutomation.html#method-i-notify","(body, subject = \"Mail from automation\", recipients = nil)","<p>Sends an email based on step recipients\n<p>Attributes\n<p><code>subject</code> - text of email subject\n"],["notify","BrpmRest","BrpmRest.html#method-i-notify","(step_id, body, subject = \"Mail from automation\")","<p>Sends an email based on step recipients\n<p>Attributes\n<p><code>subject</code> - text of email subject\n"],["nsh","TransportNSH","TransportNSH.html#method-i-nsh","(script_path, raw_result = false)","<p>Runs an nsh script\n<p>Attributes\n<p><code>script_path</code> - path (local to rpm server) to script file\n"],["nsh_command","TransportNSH","TransportNSH.html#method-i-nsh_command","(command, raw_result = false)","<p>Runs a simple one-line command in NSH\n<p>Attributes\n<p><code>command</code> - command to run\n"],["nsh_path","TransportBAA","TransportBAA.html#method-i-nsh_path","(source_path, server = nil)","<p>Returns the nsh path from a dos path\n<p>Attributes\n<p><code>source_path</code> - path in nsh\n"],["nsh_path","TransportNSH","TransportNSH.html#method-i-nsh_path","(source_path, server = nil)","<p>Returns the nsh path from a dos path\n<p>Attributes\n<p><code>source_path</code> - path in nsh\n"],["obj_to_url_item","TransportBAA","TransportBAA.html#method-i-obj_to_url_item","(obj_type, info_type = \"folder\")","<p>Returns the string for url and soap params\n<p>Attributes\n<p><code>obj_type</code> - type of object [BlPackage,DeployJob,Template] …\n"],["os_platform","DispatchBase","DispatchBase.html#method-i-os_platform","(platform)","<p>Returns the short name for the os platform Send the OS\n"],["output_separator","AutomationHeader","AutomationHeader.html#method-i-output_separator","(phrase)",""],["owner","BrpmRequest","BrpmRequest.html#method-i-owner","()","<p>Gets the owner of the request\n<p>Returns\n<p>username of request owner\n"],["pack_response","AutomationHeader","AutomationHeader.html#method-i-pack_response","(argument_name, response)",""],["package_artifacts","DispatchBAA","DispatchBAA.html#method-i-package_artifacts","(artifact_list, options = {})","<p>Attributes\n<p><code>artifact_list</code> - array of file/nsh paths\n<p><code>group_path</code> - path in Blade to store package\n"],["package_artifacts","DispatchNSH","DispatchNSH.html#method-i-package_artifacts","(file_list, options = {})","<p>Copies remote files to a local staging repository\n<p>Attributes\n<p><code>file_list</code> - array of nsh_paths\n"],["package_artifacts","DispatchSSH","DispatchSSH.html#method-i-package_artifacts","(file_list, options = {})","<p>Copies remote files to a local staging repository\n<p>Attributes\n<p><code>file_list</code> - array of nsh-style paths (//server/path …\n"],["package_artifacts","TransportBAA","TransportBAA.html#method-i-package_artifacts","(package_name, group_path, artifacts, options)","<p>Packages passed references in BAA using a component template\n\n<pre>* note artifacts all need to reside on the ...</pre>\n"],["package_staged_artifacts","DispatchBase","DispatchBase.html#method-i-package_staged_artifacts","(staging_path, version)","<p>Packages files from local staging directory\n<p>Attributes\n<p><code>staging_path</code> - path to files\n"],["package_staged_artifacts","TransportNSH","TransportNSH.html#method-i-package_staged_artifacts","(staging_path, package_name)","<p>Zip files using NSH\n<p>Attributes\n<p><code>staging_path</code> - path to files\n"],["params","Param","Param.html#method-i-params","()","<p>returns the current params\n<p>Returns\n<p>hash of params\n"],["parse_uri","Svn","Svn.html#method-i-parse_uri","(svn_uri, reset_values = false)","<p>Parses a complex svn uri into parts\n<p>Attributes\n<p><code>svn_url</code> - svn url, like this:…\n"],["path_from_nsh_path","TransportBAA","TransportBAA.html#method-i-path_from_nsh_path","(path, base_path = nil, path_property = nil)","<p>Separates the server and path from an NSH path\n\n<pre>offers the option of embedding a property (blade-style) ...</pre>\n"],["path_safe","BrpmAutomation","BrpmAutomation.html#method-i-path_safe","(txt)","<p>Returns a version of the string safe for a filname or path\n"],["plan","BrpmRequest","BrpmRequest.html#method-i-plan","()","<p>Gets the plan of the request\n<p>Returns\n<p>hash of plan or nil if not part of a plan\n"],["plan_routes","BrpmRequest","BrpmRequest.html#method-i-plan_routes","()","<p>Gets the routes available for the app/plan\n<p>Returns\n<p>array of hashes of plan routes\n"],["plan_stages","BrpmRequest","BrpmRequest.html#method-i-plan_stages","()","<p>Gets the plan stages available for the plan\n<p>Returns\n<p>array of hashes of plan stages\n"],["post_issue_transition","Jira::JiraClient","Jira/JiraClient.html#method-i-post_issue_transition","(issue_id, transition_id, comment = 'simple comment', expand_transition = false)","<p>Performs a status transition on the Jira Issue\n<p>Attributes\n<p><code>issue_key</code> - Jira issue key\n"],["precision_timestamp","BrpmAutomation","BrpmAutomation.html#method-i-precision_timestamp","()","<p>Returns a timestamp to the thousanth of a second\n<p>Returns\n<p>string timestamp 20140921153010456\n"],["present?","Param","Param.html#method-i-present-3F","(key_name, where = false)","<p>Test if a param is present\n<p>Attributes\n<p><code>key_name</code> - key to look for\n"],["present_json?","Param","Param.html#method-i-present_json-3F","(key_name)",""],["present_local?","Param","Param.html#method-i-present_local-3F","(key_name)",""],["private_properties","BrpmAutomation","BrpmAutomation.html#method-i-private_properties","(private_value = nil)","<p>Returns an array with property values that are marked private\n\n<pre>initializes array if it doesn't exist</pre>\n<p>Returns …\n"],["privatize","BrpmAutomation","BrpmAutomation.html#method-i-privatize","(txt)","<p>Returns text with private values substituted\n<p>Attributes\n<p><code>txt</code> - text to sanitize\n"],["read_shebang","AutomationHeader","AutomationHeader.html#method-i-read_shebang","(os_platform, action_txt)",""],["remove_local_param","Param","Param.html#method-i-remove_local_param","(key)","<p>Removes a key/value from the json_params\n<p>Attributes\n<p><code>key_name</code> - key name\n"],["request","BrpmRequest","BrpmRequest.html#method-i-request","()","<p>Provides a host status for the passed targets\n<p>Returns\n<p>hash of request\n"],["requestor","BrpmRequest","BrpmRequest.html#method-i-requestor","()","<p>Gets the requestor of the request\n<p>Returns\n<p>username of requestor\n"],["required","Param","Param.html#method-i-required","(key_name)","<p>Raises an error if a key is not found\n<p>Attributes\n<p><code>key_name</code> - key name\n"],["required_option","BrpmAutomation","BrpmAutomation.html#method-i-required_option","(options, key)","<p>Throws an error if an option is missing\n\n<pre>great for checking if properties exist</pre>\n<p>Attributes\n"],["rest_call","BrpmAutomation","BrpmAutomation.html#method-i-rest_call","(url, method, options = {})","<p>Makes an http method call and returns data in JSON\n<p>Attributes\n<p><code>url</code> - the url for the request\n"],["rest_request_id","Param","Param.html#method-i-rest_request_id","()","<p>Returns the request id for use in rest calls\n"],["route_environments","BrpmRequest","BrpmRequest.html#method-i-route_environments","(route_id)","<p>Gets the environments available for the route\n<p>Attributes\n<p><code>route_id</code> - id of the route\n"],["rpd_attach_deployment_logs","Object","Object.html#method-i-rpd_attach_deployment_logs","(instance_id, result_dir, pack_response_argument)",""],["rpd_attach_logs","Object","Object.html#method-i-rpd_attach_logs","(instance_id, command, result_dir, pack_response_argument)",""],["rpd_create_package_instance","Object","Object.html#method-i-rpd_create_package_instance","(package_id_or_name, wait_till_created = true, locked = \"No\", instance_name = nil)",""],["rpd_deploy_package_instance","Object","Object.html#method-i-rpd_deploy_package_instance","(package_instance_id, deploy_route, target_env_id)",""],["rpd_execute_api","Object","Object.html#method-i-rpd_execute_api","(command, args = [], options = {})",""],["rpd_get_package_id","Object","Object.html#method-i-rpd_get_package_id","(package_name)",""],["rpd_transfer_properties","Object","Object.html#method-i-rpd_transfer_properties","(package_id, prefixes = [], prop_type = \"package\")",""],["rpm_from_rpd_env","Object","Object.html#method-i-rpm_from_rpd_env","(env)",""],["rpm_load_module","Object","Object.html#method-i-rpm_load_module","(*module_names)",""],["run_command","AutomationHeader","AutomationHeader.html#method-i-run_command","(params, command, arguments = nil, b_quiet = false)",""],["save_local_params","Param","Param.html#method-i-save_local_params","()","<p>Saves json_params to the file system\n\n<pre>note: you must call this to save any changes</pre>\n<p>Attributes\n"],["save_request_params","Object","Object.html#method-i-save_request_params","()",""],["save_request_params","ResourceFramework","ResourceFramework.html#method-i-save_request_params","()",""],["script_exec","TransportNSH","TransportNSH.html#method-i-script_exec","(target_hosts, script_path, target_path, options = {})","<p>Runs a script on a remote server via NSH\n<p>Attributes\n<p><code>target_hosts</code> - blade hostnames to copy to\n"],["script_exec","TransportSSH","TransportSSH.html#method-i-script_exec","(script_path, target_path, options = {})","<p>Copies script to remote targets and executes it (bin/bash)\n<p>Attributes\n<p><code>script_path</code> - path to script file …\n"],["script_execute_body","TransportNSH","TransportNSH.html#method-i-script_execute_body","(target_hosts, script_body, target_path, options = {})","<p>Executes a text variable as a script on remote targets\n<p>Attributes\n<p><code>target_hosts</code> - array of target hosts …\n"],["search","Jira::JiraClient","Jira/JiraClient.html#method-i-search","(jql, start_at = 0, max_results = 50, fields = '', expand = '')","<p>Searches Jira issues with a jql string\n<p>Attributes\n<p><code>jql_criteria</code> - Jira query language string\n"],["semaphore","BrpmAutomation","BrpmAutomation.html#method-i-semaphore","(semaphore_key)","<p>Creates a pid-file semaphore to govern global execution\n<p>Attributes\n<p><code>semaphore_key</code> - string to name semaphore …\n"],["semaphore_clear","BrpmAutomation","BrpmAutomation.html#method-i-semaphore_clear","(semaphore_key)","<p>Clears a pid-file semaphore to govern global execution\n<p>Attributes\n<p><code>semaphore_key</code> - string to name semaphore …\n"],["semaphore_exists","BrpmAutomation","BrpmAutomation.html#method-i-semaphore_exists","(semaphore_key)","<p>Checks if a semaphore exists\n<p>Attributes\n<p><code>semaphore_key</code> - string to name semaphore\n"],["semaphore_wait","BrpmAutomation","BrpmAutomation.html#method-i-semaphore_wait","(semaphore_key, wait_time = 15)","<p>Waits a specified period for a semaphore to clear throws error after wait\ntime if semaphore does not …\n"],["server_dns_names","DispatchBase","DispatchBase.html#method-i-server_dns_names","(servers)","<p>Return the name or dns of servers in a hash list if dns exists, uses that,\notherwise, name\n<p>Attributes …\n"],["server_list","Param","Param.html#method-i-server_list","()","<p>Returns a server hash with properties from the params\n<p>Returns\n<p>hash of servers and properties ex: {server1 …\n"],["session_id","TransportBAA","TransportBAA.html#method-i-session_id","()","<p>Returns current session id\n<p>Returns\n<p>session_id\n"],["set_application_version","AutomationHeader","AutomationHeader.html#method-i-set_application_version","(prop, value)",""],["set_build_flag_data","AutomationHeader","AutomationHeader.html#method-i-set_build_flag_data","(set_item, set_data, acceptable_titles)",""],["set_component_flag","AutomationHeader","AutomationHeader.html#method-i-set_component_flag","(components)",""],["set_credential","TransportBAA","TransportBAA.html#method-i-set_credential","(baa_url, baa_username, baa_password, baa_role)","<p>Resets session and credentials\n<p>Attributes\n<p><code>baa_username</code> - username for baa\n"],["set_job_properties","TransportBAA","TransportBAA.html#method-i-set_job_properties","(job_name, group_path, props)","<p>Sets override package properties on a Job\n<p>Attributes\n<p><code>job_name</code> - dbkey for component template\n"],["set_nsh_script_params","TransportBAA","TransportBAA.html#method-i-set_nsh_script_params","(job_name, group_path, job_params,clear_params=true)","<p>Sets parameters on an NSH Script Job in BAA\n<p>Attributes\n<p><code>job_name</code> - name for package (and template)\n"],["set_property_flag","AutomationHeader","AutomationHeader.html#method-i-set_property_flag","(prop, value = nil)",""],["set_server_flag","AutomationHeader","AutomationHeader.html#method-i-set_server_flag","(servers)",""],["set_servers","TransportSSH","TransportSSH.html#method-i-set_servers","(servers)","<p>Resets the servers for ssh execution\n<p>Attributes\n<p><code>servers</code> - array of servers\n"],["set_template_properties","TransportBAA","TransportBAA.html#method-i-set_template_properties","(template_name, group_path, props, options = {})","<p>Sets properties on a ComponentTemplate\n<p>Attributes\n<p><code>template_name</code> - name for component template\n"],["set_titles_acceptable?","AutomationHeader","AutomationHeader.html#method-i-set_titles_acceptable-3F","(cur_titles, acceptable_titles)",""],["set_token","BrpmRest","BrpmRest.html#method-i-set_token","(token)","<p>Sets the token for brpm rest calls\n<p>Attributes\n<p><code>token</code> - rest token\n"],["split_nsh_path","BrpmAutomation","BrpmAutomation.html#method-i-split_nsh_path","(path)","<p>Splits the server and path from an nsh path returns same path if no server\nprepended\n<p>Attributes\n<p><code>path</code> - …\n"],["stage","BrpmRequest","BrpmRequest.html#method-i-stage","()","<p>Gets the stage of the plan the request is in\n<p>Returns\n<p>hash of stage\n"],["status","Git","Git.html#method-i-status","()","<p>Performs an svn statud\n<p>Returns\n<p>command output\n"],["status","Svn","Svn.html#method-i-status","()","<p>Performs an svn status\n<p>Returns\n<p>command output\n"],["status","TransportNSH","TransportNSH.html#method-i-status","(target_hosts)","<p>Provides a host status for the passed targets\n<p>Attributes\n<p><code>target_hosts</code> - array of hosts\n"],["steps","BrpmRequest","BrpmRequest.html#method-i-steps","()","<p>Returns the steps for the request\n<p>Returns\n<p>hash of steps from request\n"],["steps_with_matching_component","BrpmRest","BrpmRest.html#method-i-steps_with_matching_component","(steps, comp)","<p>Takes an array of step objects and a component and returns the steps that\nmatch\n<p>Attributes\n<p><code>steps</code> - an array …\n"],["steps_with_matching_component","Object","Object.html#method-i-steps_with_matching_component","(req = nil, comp = nil)",""],["tag","Git","Git.html#method-i-tag","(tag_name, message, options = {})","<p>Performs an git tag\n<p>Attributes\n<p><code>tag_name</code> - name for tag\n"],["tag","Svn","Svn.html#method-i-tag","(source_path, tag_name, message)","<p>Performs an svn tag\n<p>Attributes\n<p><code>source_path</code> - path in repo to tag\n"],["ticket_exists","Object","Object.html#method-i-ticket_exists","(foreign_id, options = {})",""],["ticket_type","Jira::JiraClient","Jira/JiraClient.html#method-i-ticket_type","(type_id)",""],["update","BrpmRest","BrpmRest.html#method-i-update","(model_name, model_id, data, options = {})","<p>Performs a put on the passed model\n\n<pre>use this to update a single record</pre>\n<p>Attributes\n"],["update_other_request_params","Object","Object.html#method-i-update_other_request_params","(request_id, updates = {})",""],["update_other_request_params","Param","Param.html#method-i-update_other_request_params","(request_id, updates = {})","<p>Inserts a value in the json_params of another request\n\n<pre>note: be careful this has to be coordinated</pre>\n<p>Attributes …\n"],["update_repo_info","Git","Git.html#method-i-update_repo_info","(options)","<p>Updates repository info from options\n<p>Attributes\n<p><code>options</code> - hash of options, keys [repository, branch]\n"],["update_state","BrpmRequest","BrpmRequest.html#method-i-update_state","(aasm_event)","<p>Updates the aasm state of the request\n<p>Attributes\n<p><code>aasm_event</code> - event name [plan, start, problem, resolve] …\n"],["version_tag_exists","Object","Object.html#method-i-version_tag_exists","(name)",""],["version_tag_query","BrpmRest","BrpmRest.html#method-i-version_tag_query","(name)","<p>Queries RPM for a version by name\n<p>Attributes\n<p><code>name</code> - a version name\n"],["version_tag_query","Object","Object.html#method-i-version_tag_query","(name, show_all = false)",""],["write_to","AutomationHeader","AutomationHeader.html#method-i-write_to","(message, newline = true)",""]]}}